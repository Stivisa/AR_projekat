%{
#include <stdio.h>

int yylex();

#define yyerror printf

#include "fol.hpp"

vector<Formula>* parsed_set_of_formulas;
Formula parsed_formula;

%}

%token<str_attr> SYMBOL;
%token EQ;

%type<formula_attr> formula
%type<formula_attr> atom
%type<term_attr> term
%type<term_seq_attr> term_seq
%type<formula_seq_attr> setFormulas

%union {
  string * str_attr;
  BaseFormula * formula_attr;
  BaseTerm * term_attr;
  vector<Term> * term_seq_attr;
  vector<Formula> *formula_seq_attr;
}

%%

input  : '{' setFormulas '}' '{' formula '}' ';'
       {
		parsed_set_of_formulas = new vector<Formula>(*$2);
		parsed_formula = Formula($5); 
		delete $2;
		return 0;
       }
       ;

setFormulas : setFormulas ',' formula
			{
				$$ = $1;
				$$->push_back(Formula($3));
			}
			| formula
			{
				$$ = new vector<Formula>();
				$$->push_back(Formula($1));
			}
			;
formula : atom
	       {
	         $$ = $1;
	       }
	       ;

atom : term EQ term 
     {
       $$ = new Equality(Term($1), Term($3));
     }
     ;

term_seq : term_seq ',' term
	 {
	   $$ = $1;
	   $$->push_back(Term($3));
	 }
	 | term
	 {
	   $$ = new vector<Term>();
	   $$->push_back(Term($1));
	 }
	 ;

term : SYMBOL '(' term_seq ')'
     {
       $$ = new FunctionTerm(*$1, *$3);
       delete $1;
       delete $3;
     }
     | SYMBOL
     {
       $$ = new FunctionTerm(*$1);
       delete $1;
     }
     ;

%%
